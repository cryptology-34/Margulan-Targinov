def pad_message(msg: bytes, block_size: int = 8) -> bytes:
    """–ü–∞–¥–¥–∏–Ω–≥ –ø–æ —Å—Ö–µ–º–µ Merkle‚ÄìDamg√•rd (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ MD5/SHA1)."""
    msg_len = len(msg)
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∏—Ç '1' (0x80) –∏ –Ω—É–ª–∏ –¥–æ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ –±–ª–æ–∫—É - 8 –±–∞–π—Ç –ø–æ–¥ –¥–ª–∏–Ω—É
    padding = b'\x80' + b'\x00' * ((block_size - (msg_len + 9) % block_size) % block_size)
    # –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (–≤ –±–∏—Ç–∞—Ö) ‚Äî 8 –±–∞–π—Ç
    msg_bit_length = (msg_len * 8).to_bytes(8, 'big')
    return msg + padding + msg_bit_length


def simple_compression(h: int, block: bytes) -> int:
    """–ü—Ä–æ—Å—Ç–µ–π—à–∞—è –º–æ–¥–µ–ª—å –∫–æ–º–ø—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–º–µ—à–∏–≤–∞–µ—Ç –±–ª–æ–∫ —Å —Ç–µ–∫—É—â–∏–º —Ö—ç—à–µ–º)."""
    for b in block:
        # XOR –∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥ –≤–ª–µ–≤–æ ‚Äî –ø—Ä–æ—Å—Ç–∞—è, –Ω–æ –ø–æ–Ω—è—Ç–Ω–∞—è –∏–¥–µ—è
        h = ((h ^ b) << 3 | (h >> (61))) & 0xFFFFFFFFFFFFFFFF
    return h


def merkle_damgard_hash(msg: str) -> str:
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ö—ç—à-—Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Merkle‚ÄìDamg√•rd."""
    # 1. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –±–∞–π—Ç—ã
    data = msg.encode()

    # 2. –ü–∞–¥–¥–∏–Ω–≥
    padded = pad_message(data)

    # 3. –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (IV)
    h = 0x0123456789ABCDEF

    # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    for i in range(0, len(padded), 8):
        block = padded[i:i+8]
        h = simple_compression(h, block)

    # 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö—ç—à –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º –≤–∏–¥–µ
    return hex(h)[2:].zfill(16)


# üîπ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    msg = "Hello world"
    print("–°–æ–æ–±—â–µ–Ω–∏–µ:", msg)
    print("–•—ç—à:", merkle_damgard_hash(msg))
